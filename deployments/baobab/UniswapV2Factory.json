{
  "address": "0x79841BFF57F826aB6F1AE8dBC68a564375AA878F",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenA",
          "type": "address"
        },
        {
          "name": "tokenB",
          "type": "address"
        },
        {
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "klayBuybackFund",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenA",
          "type": "address"
        },
        {
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "name": "pair",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_klayBuybackFund",
          "type": "address"
        }
      ],
      "name": "setKlayBuybackFund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    }
  ],
  "transactionHash": "0xbddfb2f9536801e2de3cab93653a9a35a6085e20ee88e8940f62317f0507a249",
  "receipt": {
    "to": null,
    "from": "0x0E83454DeC08cdc5b88e9dC29CaF35b3Da00F1F1",
    "contractAddress": "0x79841BFF57F826aB6F1AE8dBC68a564375AA878F",
    "transactionIndex": 0,
    "gasUsed": "4199926",
    "logsBloom": "0x
    "blockHash": "0xe1b2a05b5abeb0ff778cb55e7b5031f10f9ab879ce53d0af86565735aedb8ec5",
    "transactionHash": "0xbddfb2f9536801e2de3cab93653a9a35a6085e20ee88e8940f62317f0507a249",
    "logs": [],
    "blockNumber": 83433186,
    "cumulativeGasUsed": "4199926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0E83454DeC08cdc5b88e9dC29CaF35b3Da00F1F1"
  ],
  "solcInputHash": "2ee3e3b858092355b208e192c5e4dac0",
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createPair\",\"outputs\":[{\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"klayBuybackFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"name\":\"pair\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_klayBuybackFund\",\"type\":\"address\"}],\"name\":\"setKlayBuybackFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"createPair(address,address)\":{\"notice\":\"create pair with default decimals(18)\"},\"createPair(address,address,uint8)\":{\"notice\":\"create pair with custom decimals. Can only be called by migrator\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/swap/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xdb17a1fb73e261e736ae8862be2d9a32964fc4b3741f48980f5cdc9d92b99a96\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.5.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1aa445e0dd3dd86c57866af28e3259d468377c934343b6b74d58bfb15e37d25a\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity 0.5.6;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function migrator() external view returns (address);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function feeDistributor() external view returns (address);\\n\\n    function klayBuybackFund() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function createPair(address tokenA, address tokenB, uint8 decimals)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setFeeDistributor(address) external;\\n\\n    function setKlayBuybackFund(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x7fee6be62fd77fe4a16bdeac54ae33afd1a761019e7107e1974b2d933bf28aa9\"},\"contracts/libraries/Math.sol\":{\"content\":\"pragma solidity 0.5.6;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc082cf01f804e5262e627daf267ded67fa11828c55a5de788b92e199605d4e53\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"pragma solidity 0.5.6;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x48659d7ca3191ae89df4d7b3b3d5a33d66b6b7eaa64d2d46daec69c07c90e818\"},\"contracts/swap/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract UniswapV2ERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name;\\n    string public constant symbol = \\\"CLA-LP\\\";\\n    uint8 public decimals; /// @dev decimal is set by pair initalize function\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() public {}\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x42e6204a9c0db4d886381a78ec93408f1b2505e5472c25ba1a1e72f800a0a405\"},\"contracts/swap/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./UniswapV2Pair.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory {\\n    address public feeToSetter;\\n    address public feeTo;\\n    address public feeDistributor;\\n    address public klayBuybackFund;\\n    address public migrator;\\n\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    /// @notice create pair with default decimals(18)\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UniswapV2Pair(pair).initialize(token0, token1, 18);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /// @notice create pair with custom decimals. Can only be called by migrator\\n    function createPair(address tokenA, address tokenB, uint8 decimals)\\n        external\\n        returns (address pair)\\n    {   \\n        require(msg.sender == migrator);\\n        require(tokenA != tokenB, \\\"UniswapV2: IDENTICAL_ADDRESSES\\\");\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2: ZERO_ADDRESS\\\");\\n        require(\\n            getPair[token0][token1] == address(0),\\n            \\\"UniswapV2: PAIR_EXISTS\\\"\\n        ); // single check is sufficient\\n        bytes memory bytecode = type(UniswapV2Pair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        UniswapV2Pair(pair).initialize(token0, token1, decimals);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setFeeDistributor(address _feeDistributor) external {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        feeDistributor = _feeDistributor;\\n    }\\n\\n    function setKlayBuybackFund(address _klayBuybackFund) external {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        klayBuybackFund = _klayBuybackFund;\\n    }\\n\\n    function setMigrator(address _migrator) external {\\n        require(msg.sender == feeToSetter, \\\"UniswapV2: FORBIDDEN\\\");\\n        migrator = _migrator;\\n    }\\n}\\n\",\"keccak256\":\"0x7c281d381124df6001ce4c9af4feaf0d2b38b4b4408662c5d011408edf8b1a43\"},\"contracts/swap/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"./UniswapV2ERC20.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../libraries/UQ112x112.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract UniswapV2Pair is UniswapV2ERC20 {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR =\\n        bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"UniswapV2: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(SELECTOR, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"UniswapV2: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, uint8 _decimals) external {\\n        require(msg.sender == factory, \\\"UniswapV2: FORBIDDEN\\\"); // sufficient check\\n        decimals = _decimals;\\n        token0 = _token0;\\n        token1 = _token1;\\n        name = string(\\n            abi.encodePacked(\\n                \\\"ClaimSwap LP \\\",\\n                IERC20(_token0).symbol(),\\n                \\\"-\\\",\\n                IERC20(_token1).symbol()\\n            )\\n        );\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        require(\\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\\n            \\\"UniswapV2: OVERFLOW\\\"\\n        );\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\\n                timeElapsed;\\n            price1CumulativeLast +=\\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\\n                timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    // and remove liquidity equivalent to 1/3th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\\n        private\\n        returns (bool feeOn)\\n    {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        address feeDistributor = IUniswapV2Factory(factory).feeDistributor(); // feeDistributor for CLS holders\\n        address klayBuybackFund = IUniswapV2Factory(factory).klayBuybackFund();\\n        feeOn =\\n            feeTo != address(0) &&\\n            feeDistributor != address(0) &&\\n            klayBuybackFund != address(0);\\n        uint256 _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\\n                uint256 rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    // https://uniswap.org/whitepaper.pdf\\n                    // + 1/3th (0.1%) to CLS holders\\n                    // + 1/12th (0.025%) to Treasury\\n                    // + 1/12th (0.025%) to Klay buyback fund\\n                    // = 1/2th\\n                    // Then, 1 / (1/2th) - 1 = 1\\n                    uint256 numerator = totalSupply.mul(\\n                        rootK.sub(rootKLast)\\n                    );\\n                    uint256 denominator = rootK.add(rootKLast);\\n                    uint256 liquidity = numerator / denominator;\\n                    if (liquidity > 0) {\\n                        uint256 liquidityTofeeTo = liquidity / 6;\\n                        uint256 liquidityToKlayBuybackFund = liquidity / 6;\\n                        uint256 liquidityToFeeDistributor = liquidity\\n                            .sub(liquidityTofeeTo)\\n                            .sub(liquidityToKlayBuybackFund);\\n                        _mint(feeTo, liquidityTofeeTo);\\n                        _mint(klayBuybackFund, liquidityToKlayBuybackFund);\\n                        _mint(feeDistributor, liquidityToFeeDistributor);\\n                    }\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = IUniswapV2Factory(factory).migrator();\\n            if (msg.sender == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(\\n                    liquidity > 0 && liquidity != uint256(-1),\\n                    \\\"Bad desired liquidity\\\"\\n                );\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(\\n                    MINIMUM_LIQUIDITY\\n                );\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(\\n                amount0.mul(_totalSupply) / _reserve0,\\n                amount1.mul(_totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to)\\n        external\\n        lock\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(\\n            amount0 > 0 && amount1 > 0,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\\\"\\n        );\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(\\n            amount0Out > 0 || amount1Out > 0,\\n            \\\"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        require(\\n            amount0Out < _reserve0 && amount1Out < _reserve1,\\n            \\\"UniswapV2: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"UniswapV2: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IUniswapV2Callee(to).uniswapV2Call(\\n                    msg.sender,\\n                    amount0Out,\\n                    amount1Out,\\n                    data\\n                );\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\\n            ? balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\\n            ? balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(\\n            amount0In > 0 || amount1In > 0,\\n            \\\"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\\\"\\n        );\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(\\n                balance0Adjusted.mul(balance1Adjusted) >=\\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\\n                \\\"UniswapV2: K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x093239e91f5a2e1bd330b1bcf38cc556ef0d795c9b80809bd2eca2304602ab37\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516020806135e68339810180604052602081101561003057600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055613584806100626000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063672a9f8d11610097578063ccfc2e8d11610066578063ccfc2e8d1461022b578063e6a4390514610251578063f09240c31461027f578063f46901ed146102a5576100f5565b8063672a9f8d146101c75780637cd07e47146101cf578063a2e74af6146101d7578063c9c65396146101fd576100f5565b80631e3dd18b116100d35780631e3dd18b1461012e57806323cf31181461014b5780633dea766414610173578063574f2ba3146101ad576100f5565b8063017e7e58146100fa578063094b74151461011e5780630d43e8ad14610126575b600080fd5b6101026102cb565b604080516001600160a01b039092168252519081900360200190f35b6101026102da565b6101026102e9565b6101026004803603602081101561014457600080fd5b50356102f8565b6101716004803603602081101561016157600080fd5b50356001600160a01b031661031f565b005b6101026004803603606081101561018957600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff166103a3565b6101b5610702565b60408051918252519081900360200190f35b610102610708565b610102610717565b610171600480360360208110156101ed57600080fd5b50356001600160a01b0316610726565b6101026004803603604081101561021357600080fd5b506001600160a01b03813581169160200135166107aa565b6101716004803603602081101561024157600080fd5b50356001600160a01b0316610aee565b6101026004803603604081101561026757600080fd5b506001600160a01b0381358116916020013516610b72565b6101716004803603602081101561029557600080fd5b50356001600160a01b0316610b98565b610171600480360360208110156102bb57600080fd5b50356001600160a01b0316610c1c565b6001546001600160a01b031681565b6000546001600160a01b031681565b6002546001600160a01b031681565b6006818154811061030557fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146103815760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546000906001600160a01b031633146103bd57600080fd5b826001600160a01b0316846001600160a01b031614156104275760408051600160e51b62461bcd02815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b03161061044a57848661044d565b85855b90925090506001600160a01b0382166104b05760408051600160e51b62461bcd02815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526005602090815260408083208585168452909152902054161561052d5760408051600160e51b62461bcd02815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161053f90610ca0565b601f1982820381018352601f9091011660408181526001600160a01b03808716606090811b602085810191909152918716901b6034840152815160288185030181526048909301909152815191810191909120825192935091829184016000f5604080517f89232a000000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152868116602483015260ff8a1660448301529151929750908716916389232a009160648082019260009290919082900301818387803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050509392505050565b60065490565b6003546001600160a01b031681565b6004546001600160a01b031681565b6000546001600160a01b031633146107885760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156108165760408051600160e51b62461bcd02815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061083957838561083c565b84845b90925090506001600160a01b03821661089f5760408051600160e51b62461bcd02815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526005602090815260408083208585168452909152902054161561091c5760408051600160e51b62461bcd02815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161092e90610ca0565b601f1982820381018352601f9091011660408181526001600160a01b03808716606090811b602085810191909152918716901b6034840152815160288185030181526048909301909152815191810191909120825192935091829184016000f5604080517f89232a000000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152601260448301529151929750908716916389232a009160648082019260009290919082900301818387803b158015610a0457600080fd5b505af1158015610a18573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6000546001600160a01b03163314610b505760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6000546001600160a01b03163314610bfa5760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c7e5760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6128ab80610cae8339019056fe60806040526001600c5534801561001557600080fd5b50600580546001600160a01b03191633179055612874806100376000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063ba9a7a561161008c578063d21220a711610066578063d21220a7146104ee578063dd62ed3e146104f6578063fff6cae9146105245761018d565b8063ba9a7a56146104b8578063bc25cf77146104c0578063c45a0155146104e65761018d565b806389afcb44116100bd57806389afcb441461044557806395d89b4114610484578063a9059cbb1461048c5761018d565b806370a08231146103dd5780637464fc3d1461040357806389232a001461040b5761018d565b806318160ddd116101455780635909c0d51161011f5780635909c0d5146103a75780635a3d5493146103af5780636a627842146103b75761018d565b806318160ddd1461033957806323b872dd14610353578063313ce567146103895761018d565b80630902f1ac116101765780630902f1ac1461029d578063095ea7b3146102d55780630dfe1681146103155761018d565b8063022c0d9f1461019257806306fdde0314610220575b600080fd5b61021e600480360360808110156101a857600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101df57600080fd5b8201836020820111156101f157600080fd5b8035906020019184600183028401116401000000008311171561021357600080fd5b50909250905061052c565b005b610228610aa4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026257818101518382015260200161024a565b50505050905090810190601f16801561028f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a5610b32565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b610301600480360360408110156102eb57600080fd5b506001600160a01b038135169060200135610b5c565b604080519115158252519081900360200190f35b61031d610b73565b604080516001600160a01b039092168252519081900360200190f35b610341610b82565b60408051918252519081900360200190f35b6103016004803603606081101561036957600080fd5b506001600160a01b03813581169160208101359091169060400135610b88565b610391610c22565b6040805160ff9092168252519081900360200190f35b610341610c2b565b610341610c31565b610341600480360360208110156103cd57600080fd5b50356001600160a01b0316610c37565b610341600480360360208110156103f357600080fd5b50356001600160a01b031661111d565b61034161112f565b61021e6004803603606081101561042157600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff16611135565b61046b6004803603602081101561045b57600080fd5b50356001600160a01b03166114a9565b6040805192835260208301919091528051918290030190f35b61022861186d565b610301600480360360408110156104a257600080fd5b506001600160a01b0381351690602001356118a6565b6103416118b3565b61021e600480360360208110156104d657600080fd5b50356001600160a01b03166118b9565b61031d611a39565b61031d611a48565b6103416004803603604081101561050c57600080fd5b506001600160a01b0381358116916020013516611a57565b61021e611a74565b600c546001146105865760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c55841515806105995750600084115b6105d757604051600160e51b62461bcd02815260040180806020018281038252602581526020018061276e6025913960400191505060405180910390fd5b6000806105e2610b32565b5091509150816001600160701b0316871080156106075750806001600160701b031686105b61064557604051600160e51b62461bcd0281526004018080602001828103825260218152602001806127b76021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906106835750806001600160a01b0316896001600160a01b031614155b6106d75760408051600160e51b62461bcd02815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f0000000000000000000000604482015290519081900360640190fd5b8a156106e8576106e8828a8d611beb565b89156106f9576106f9818a8c611beb565b86156107b457886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b505050505b60408051600160e01b6370a0823102815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d602081101561082757600080fd5b505160408051600160e01b6370a0823102815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60208110156108a057600080fd5b5051925060009150506001600160701b0385168a900383116108c35760006108d2565b89856001600160701b03160383035b9050600089856001600160701b03160383116108ef5760006108fe565b89856001600160701b03160383035b9050600082118061090f5750600081115b61094d57604051600160e51b62461bcd0281526004018080602001828103825260248152602001806127936024913960400191505060405180910390fd5b600061098161096384600363ffffffff611da116565b610975876103e863ffffffff611da116565b9063ffffffff611e0416565b9050600061099961096384600363ffffffff611da116565b90506109ca620f42406109be6001600160701b038b8116908b1663ffffffff611da116565b9063ffffffff611da116565b6109da838363ffffffff611da116565b1015610a305760408051600160e51b62461bcd02815260206004820152600c60248201527f556e697377617056323a204b0000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610a3e84848888611e46565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2a5780601f10610aff57610100808354040283529160200191610b2a565b820191906000526020600020905b815481529060010190602001808311610b0d57829003601f168201915b505050505081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b69338484612026565b5060015b92915050565b6006546001600160a01b031681565b60025481565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610c0d576001600160a01b0384166000908152600460209081526040808320338452909152902054610be8908363ffffffff611e0416565b6001600160a01b03851660009081526004602090815260408083203384529091529020555b610c18848484612088565b5060019392505050565b60015460ff1681565b60095481565b600a5481565b6000600c54600114610c935760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580610ca3610b32565b5060065460408051600160e01b6370a0823102815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d6020811015610d2457600080fd5b505160075460408051600160e01b6370a0823102815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d6020811015610da457600080fd5b505190506000610dc3836001600160701b03871663ffffffff611e0416565b90506000610de0836001600160701b03871663ffffffff611e0416565b90506000610dee8787612142565b60025490915080610ff957600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d6020811015610e8157600080fd5b50519050336001600160a01b0382161415610f6757806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecf57600080fd5b505afa158015610ee3573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b505199508915801590610f0e57506000198a14155b610f625760408051600160e51b62461bcd02815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b610ff3565b6001600160a01b03811615610fc65760408051600160e51b62461bcd02815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b610fe46103e8610975610fdf888863ffffffff611da116565b612408565b9950610ff360006103e861245a565b50611048565b6110456001600160701b038916611016868463ffffffff611da116565b8161101d57fe5b046001600160701b038916611038868563ffffffff611da116565b8161103f57fe5b046124f1565b98505b6000891161108a57604051600160e51b62461bcd0281526004018080602001828103825260288152602001806128006028913960400191505060405180910390fd5b6110948a8a61245a565b6110a086868a8a611e46565b81156110d0576008546110cc906001600160701b0380821691600160701b90041663ffffffff611da116565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60036020526000908152604090205481565b600b5481565b6005546001600160a01b031633146111975760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b6001805460ff831660ff19909116179055600680546001600160a01b038086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556007805491861691909216179055604080517f95d89b4100000000000000000000000000000000000000000000000000000000815290516395d89b4191600480820192600092909190829003018186803b15801561123d57600080fd5b505afa158015611251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561127a57600080fd5b81019080805164010000000081111561129257600080fd5b820160208101848111156112a557600080fd5b81516401000000008111828201871017156112bf57600080fd5b5050929190505050826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561133d57600080fd5b81019080805164010000000081111561135557600080fd5b8201602081018481111561136857600080fd5b815164010000000081118282018710171561138257600080fd5b505092919050505060405160200180807f436c61696d53776170204c502000000000000000000000000000000000000000815250600d0183805190602001908083835b602083106113e45780518252601f1990920191602091820191016113c5565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083106114595780518252601f19909201916020918201910161143a565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052600090805190602001906114a39291906126d2565b50505050565b600080600c546001146115065760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611516610b32565b5060065460075460408051600160e01b6370a0823102815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561157557600080fd5b505afa158015611589573d6000803e3d6000fd5b505050506040513d602081101561159f57600080fd5b505160408051600160e01b6370a0823102815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d602081101561161a57600080fd5b5051306000908152600360205260408120549192506116398888612142565b60025490915080611650848763ffffffff611da116565b8161165757fe5b049a508061166b848663ffffffff611da116565b8161167257fe5b04995060008b118015611685575060008a115b6116c357604051600160e51b62461bcd0281526004018080602001828103825260288152602001806127d86028913960400191505060405180910390fd5b6116cd3084612507565b6116d8878d8d611beb565b6116e3868d8c611beb565b60408051600160e01b6370a0823102815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561172c57600080fd5b505afa158015611740573d6000803e3d6000fd5b505050506040513d602081101561175657600080fd5b505160408051600160e01b6370a0823102815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156117a557600080fd5b505afa1580156117b9573d6000803e3d6000fd5b505050506040513d60208110156117cf57600080fd5b505193506117df85858b8b611e46565b811561180f5760085461180b906001600160701b0380821691600160701b90041663ffffffff611da116565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f434c412d4c50000000000000000000000000000000000000000000000000000081525081565b6000610b69338484612088565b6103e881565b600c546001146119135760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560065460075460085460408051600160e01b6370a0823102815230600482015290516001600160a01b0394851694909316926119c592859287926119c0926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561198857600080fd5b505afa15801561199c573d6000803e3d6000fd5b505050506040513d60208110156119b257600080fd5b50519063ffffffff611e0416565b611beb565b60085460408051600160e01b6370a082310281523060048201529051611a2f92849287926119c092600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561198857600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b600460209081526000928352604080842090915290825290205481565b600c54600114611ace5760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560065460408051600160e01b6370a082310281523060048201529051611be4926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d6020811015611b4c57600080fd5b505160075460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b9c57600080fd5b505afa158015611bb0573d6000803e3d6000fd5b505050506040513d6020811015611bc657600080fd5b50516008546001600160701b0380821691600160701b900416611e46565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310611cb15780518252601f199092019160209182019101611c92565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d13576040519150601f19603f3d011682016040523d82523d6000602084013e611d18565b606091505b5091509150818015611d46575080511580611d465750808060200190516020811015611d4357600080fd5b50515b611d9a5760408051600160e51b62461bcd02815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600082611db057506000610b6d565b82820282848281611dbd57fe5b0414611dfd57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806128286021913960400191505060405180910390fd5b9392505050565b6000611dfd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506125a4565b6001600160701b038411801590611e6457506001600160701b038311155b611eb85760408051600160e51b62461bcd02815260206004820152601360248201527f556e697377617056323a204f564552464c4f5700000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611ee857506001600160701b03841615155b8015611efc57506001600160701b03831615155b15611f6d578063ffffffff16611f2a85611f158661263e565b6001600160e01b03169063ffffffff61265016565b600980546001600160e01b03929092169290920201905563ffffffff8116611f5584611f158761263e565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600360205260409020546120b1908263ffffffff611e0416565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546120e6908263ffffffff61267516565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219357600080fd5b505afa1580156121a7573d6000803e3d6000fd5b505050506040513d60208110156121bd57600080fd5b5051600554604080517f0d43e8ad00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b0390921691630d43e8ad91600480820192602092909190829003018186803b15801561222357600080fd5b505afa158015612237573d6000803e3d6000fd5b505050506040513d602081101561224d57600080fd5b5051600554604080517f672a9f8d00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163672a9f8d91600480820192602092909190829003018186803b1580156122b357600080fd5b505afa1580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b505190506001600160a01b0383161580159061230157506001600160a01b03821615155b801561231557506001600160a01b03811615155b600b5490945084156123f25780156123ed576000612348610fdf6001600160701b038a8116908a1663ffffffff611da116565b9050600061235583612408565b9050808211156123ea576000612383612374848463ffffffff611e0416565b6002549063ffffffff611da116565b90506000612397848463ffffffff61267516565b905060008183816123a457fe5b04905080156123e657600681048060006123c2826109758682611e04565b90506123ce8c8461245a565b6123d88a8361245a565b6123e28b8261245a565b5050505b5050505b50505b6123fe565b80156123fe576000600b555b5050505092915050565b6000600382111561244b575080600160028204015b818110156124455780915060028182858161243457fe5b04018161243d57fe5b04905061241d565b50612455565b8115612455575060015b919050565b60025461246d908263ffffffff61267516565b6002556001600160a01b038216600090815260036020526040902054612499908263ffffffff61267516565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106125005781611dfd565b5090919050565b6001600160a01b038216600090815260036020526040902054612530908263ffffffff611e0416565b6001600160a01b03831660009081526003602052604090205560025461255c908263ffffffff611e0416565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000818484111561263657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125fb5781810151838201526020016125e3565b50505050905090810190601f1680156126285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161266d57fe5b049392505050565b600082820183811015611dfd5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061271357805160ff1916838001178555612740565b82800160010185558215612740579182015b82811115612740578251825591602001919060010190612725565b5061274c929150612750565b5090565b61276a91905b8082111561274c5760008155600101612756565b9056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a7230582054e1bed76916c997cf068bebd5f7845c7ca5984d0d4e14db172b41025c8bbb6b0029a165627a7a72305820b96e6a55d9fafc964dbbd4925ddbb0382e0ecd32e005c3298aff097c4716926f0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063672a9f8d11610097578063ccfc2e8d11610066578063ccfc2e8d1461022b578063e6a4390514610251578063f09240c31461027f578063f46901ed146102a5576100f5565b8063672a9f8d146101c75780637cd07e47146101cf578063a2e74af6146101d7578063c9c65396146101fd576100f5565b80631e3dd18b116100d35780631e3dd18b1461012e57806323cf31181461014b5780633dea766414610173578063574f2ba3146101ad576100f5565b8063017e7e58146100fa578063094b74151461011e5780630d43e8ad14610126575b600080fd5b6101026102cb565b604080516001600160a01b039092168252519081900360200190f35b6101026102da565b6101026102e9565b6101026004803603602081101561014457600080fd5b50356102f8565b6101716004803603602081101561016157600080fd5b50356001600160a01b031661031f565b005b6101026004803603606081101561018957600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff166103a3565b6101b5610702565b60408051918252519081900360200190f35b610102610708565b610102610717565b610171600480360360208110156101ed57600080fd5b50356001600160a01b0316610726565b6101026004803603604081101561021357600080fd5b506001600160a01b03813581169160200135166107aa565b6101716004803603602081101561024157600080fd5b50356001600160a01b0316610aee565b6101026004803603604081101561026757600080fd5b506001600160a01b0381358116916020013516610b72565b6101716004803603602081101561029557600080fd5b50356001600160a01b0316610b98565b610171600480360360208110156102bb57600080fd5b50356001600160a01b0316610c1c565b6001546001600160a01b031681565b6000546001600160a01b031681565b6002546001600160a01b031681565b6006818154811061030557fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146103815760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546000906001600160a01b031633146103bd57600080fd5b826001600160a01b0316846001600160a01b031614156104275760408051600160e51b62461bcd02815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080846001600160a01b0316866001600160a01b03161061044a57848661044d565b85855b90925090506001600160a01b0382166104b05760408051600160e51b62461bcd02815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526005602090815260408083208585168452909152902054161561052d5760408051600160e51b62461bcd02815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161053f90610ca0565b601f1982820381018352601f9091011660408181526001600160a01b03808716606090811b602085810191909152918716901b6034840152815160288185030181526048909301909152815191810191909120825192935091829184016000f5604080517f89232a000000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152868116602483015260ff8a1660448301529151929750908716916389232a009160648082019260009290919082900301818387803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050509392505050565b60065490565b6003546001600160a01b031681565b6004546001600160a01b031681565b6000546001600160a01b031633146107885760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000816001600160a01b0316836001600160a01b031614156108165760408051600160e51b62461bcd02815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061083957838561083c565b84845b90925090506001600160a01b03821661089f5760408051600160e51b62461bcd02815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b0382811660009081526005602090815260408083208585168452909152902054161561091c5760408051600160e51b62461bcd02815260206004820152601660248201527f556e697377617056323a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b60606040518060200161092e90610ca0565b601f1982820381018352601f9091011660408181526001600160a01b03808716606090811b602085810191909152918716901b6034840152815160288185030181526048909301909152815191810191909120825192935091829184016000f5604080517f89232a000000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152601260448301529151929750908716916389232a009160648082019260009290919082900301818387803b158015610a0457600080fd5b505af1158015610a18573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526005602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560068054600181018255958190527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b6000546001600160a01b03163314610b505760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6000546001600160a01b03163314610bfa5760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610c7e5760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6128ab80610cae8339019056fe60806040526001600c5534801561001557600080fd5b50600580546001600160a01b03191633179055612874806100376000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063ba9a7a561161008c578063d21220a711610066578063d21220a7146104ee578063dd62ed3e146104f6578063fff6cae9146105245761018d565b8063ba9a7a56146104b8578063bc25cf77146104c0578063c45a0155146104e65761018d565b806389afcb44116100bd57806389afcb441461044557806395d89b4114610484578063a9059cbb1461048c5761018d565b806370a08231146103dd5780637464fc3d1461040357806389232a001461040b5761018d565b806318160ddd116101455780635909c0d51161011f5780635909c0d5146103a75780635a3d5493146103af5780636a627842146103b75761018d565b806318160ddd1461033957806323b872dd14610353578063313ce567146103895761018d565b80630902f1ac116101765780630902f1ac1461029d578063095ea7b3146102d55780630dfe1681146103155761018d565b8063022c0d9f1461019257806306fdde0314610220575b600080fd5b61021e600480360360808110156101a857600080fd5b8135916020810135916001600160a01b0360408301351691908101906080810160608201356401000000008111156101df57600080fd5b8201836020820111156101f157600080fd5b8035906020019184600183028401116401000000008311171561021357600080fd5b50909250905061052c565b005b610228610aa4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026257818101518382015260200161024a565b50505050905090810190601f16801561028f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102a5610b32565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b610301600480360360408110156102eb57600080fd5b506001600160a01b038135169060200135610b5c565b604080519115158252519081900360200190f35b61031d610b73565b604080516001600160a01b039092168252519081900360200190f35b610341610b82565b60408051918252519081900360200190f35b6103016004803603606081101561036957600080fd5b506001600160a01b03813581169160208101359091169060400135610b88565b610391610c22565b6040805160ff9092168252519081900360200190f35b610341610c2b565b610341610c31565b610341600480360360208110156103cd57600080fd5b50356001600160a01b0316610c37565b610341600480360360208110156103f357600080fd5b50356001600160a01b031661111d565b61034161112f565b61021e6004803603606081101561042157600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff16611135565b61046b6004803603602081101561045b57600080fd5b50356001600160a01b03166114a9565b6040805192835260208301919091528051918290030190f35b61022861186d565b610301600480360360408110156104a257600080fd5b506001600160a01b0381351690602001356118a6565b6103416118b3565b61021e600480360360208110156104d657600080fd5b50356001600160a01b03166118b9565b61031d611a39565b61031d611a48565b6103416004803603604081101561050c57600080fd5b506001600160a01b0381358116916020013516611a57565b61021e611a74565b600c546001146105865760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c55841515806105995750600084115b6105d757604051600160e51b62461bcd02815260040180806020018281038252602581526020018061276e6025913960400191505060405180910390fd5b6000806105e2610b32565b5091509150816001600160701b0316871080156106075750806001600160701b031686105b61064557604051600160e51b62461bcd0281526004018080602001828103825260218152602001806127b76021913960400191505060405180910390fd5b60065460075460009182916001600160a01b039182169190811690891682148015906106835750806001600160a01b0316896001600160a01b031614155b6106d75760408051600160e51b62461bcd02815260206004820152601560248201527f556e697377617056323a20494e56414c49445f544f0000000000000000000000604482015290519081900360640190fd5b8a156106e8576106e8828a8d611beb565b89156106f9576106f9818a8c611beb565b86156107b457886001600160a01b03166310d1e85c338d8d8c8c6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b505050505b60408051600160e01b6370a0823102815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d602081101561082757600080fd5b505160408051600160e01b6370a0823102815230600482015290519195506001600160a01b038316916370a0823191602480820192602092909190829003018186803b15801561087657600080fd5b505afa15801561088a573d6000803e3d6000fd5b505050506040513d60208110156108a057600080fd5b5051925060009150506001600160701b0385168a900383116108c35760006108d2565b89856001600160701b03160383035b9050600089856001600160701b03160383116108ef5760006108fe565b89856001600160701b03160383035b9050600082118061090f5750600081115b61094d57604051600160e51b62461bcd0281526004018080602001828103825260248152602001806127936024913960400191505060405180910390fd5b600061098161096384600363ffffffff611da116565b610975876103e863ffffffff611da116565b9063ffffffff611e0416565b9050600061099961096384600363ffffffff611da116565b90506109ca620f42406109be6001600160701b038b8116908b1663ffffffff611da116565b9063ffffffff611da116565b6109da838363ffffffff611da116565b1015610a305760408051600160e51b62461bcd02815260206004820152600c60248201527f556e697377617056323a204b0000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610a3e84848888611e46565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2a5780601f10610aff57610100808354040283529160200191610b2a565b820191906000526020600020905b815481529060010190602001808311610b0d57829003601f168201915b505050505081565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b69338484612026565b5060015b92915050565b6006546001600160a01b031681565b60025481565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001914610c0d576001600160a01b0384166000908152600460209081526040808320338452909152902054610be8908363ffffffff611e0416565b6001600160a01b03851660009081526004602090815260408083203384529091529020555b610c18848484612088565b5060019392505050565b60015460ff1681565b60095481565b600a5481565b6000600c54600114610c935760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580610ca3610b32565b5060065460408051600160e01b6370a0823102815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d6020811015610d2457600080fd5b505160075460408051600160e01b6370a0823102815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d6020811015610da457600080fd5b505190506000610dc3836001600160701b03871663ffffffff611e0416565b90506000610de0836001600160701b03871663ffffffff611e0416565b90506000610dee8787612142565b60025490915080610ff957600554604080517f7cd07e4700000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d6020811015610e8157600080fd5b50519050336001600160a01b0382161415610f6757806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecf57600080fd5b505afa158015610ee3573d6000803e3d6000fd5b505050506040513d6020811015610ef957600080fd5b505199508915801590610f0e57506000198a14155b610f625760408051600160e51b62461bcd02815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b610ff3565b6001600160a01b03811615610fc65760408051600160e51b62461bcd02815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b610fe46103e8610975610fdf888863ffffffff611da116565b612408565b9950610ff360006103e861245a565b50611048565b6110456001600160701b038916611016868463ffffffff611da116565b8161101d57fe5b046001600160701b038916611038868563ffffffff611da116565b8161103f57fe5b046124f1565b98505b6000891161108a57604051600160e51b62461bcd0281526004018080602001828103825260288152602001806128006028913960400191505060405180910390fd5b6110948a8a61245a565b6110a086868a8a611e46565b81156110d0576008546110cc906001600160701b0380821691600160701b90041663ffffffff611da116565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60036020526000908152604090205481565b600b5481565b6005546001600160a01b031633146111975760408051600160e51b62461bcd02815260206004820152601460248201527f556e697377617056323a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b6001805460ff831660ff19909116179055600680546001600160a01b038086167fffffffffffffffffffffffff000000000000000000000000000000000000000092831681179093556007805491861691909216179055604080517f95d89b4100000000000000000000000000000000000000000000000000000000815290516395d89b4191600480820192600092909190829003018186803b15801561123d57600080fd5b505afa158015611251573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561127a57600080fd5b81019080805164010000000081111561129257600080fd5b820160208101848111156112a557600080fd5b81516401000000008111828201871017156112bf57600080fd5b5050929190505050826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561133d57600080fd5b81019080805164010000000081111561135557600080fd5b8201602081018481111561136857600080fd5b815164010000000081118282018710171561138257600080fd5b505092919050505060405160200180807f436c61696d53776170204c502000000000000000000000000000000000000000815250600d0183805190602001908083835b602083106113e45780518252601f1990920191602091820191016113c5565b6001836020036101000a038019825116818451168082178552505050505050905001807f2d0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083106114595780518252601f19909201916020918201910161143a565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052600090805190602001906114a39291906126d2565b50505050565b600080600c546001146115065760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611516610b32565b5060065460075460408051600160e01b6370a0823102815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561157557600080fd5b505afa158015611589573d6000803e3d6000fd5b505050506040513d602081101561159f57600080fd5b505160408051600160e01b6370a0823102815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d602081101561161a57600080fd5b5051306000908152600360205260408120549192506116398888612142565b60025490915080611650848763ffffffff611da116565b8161165757fe5b049a508061166b848663ffffffff611da116565b8161167257fe5b04995060008b118015611685575060008a115b6116c357604051600160e51b62461bcd0281526004018080602001828103825260288152602001806127d86028913960400191505060405180910390fd5b6116cd3084612507565b6116d8878d8d611beb565b6116e3868d8c611beb565b60408051600160e01b6370a0823102815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b15801561172c57600080fd5b505afa158015611740573d6000803e3d6000fd5b505050506040513d602081101561175657600080fd5b505160408051600160e01b6370a0823102815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b1580156117a557600080fd5b505afa1580156117b9573d6000803e3d6000fd5b505050506040513d60208110156117cf57600080fd5b505193506117df85858b8b611e46565b811561180f5760085461180b906001600160701b0380821691600160701b90041663ffffffff611da116565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f434c412d4c50000000000000000000000000000000000000000000000000000081525081565b6000610b69338484612088565b6103e881565b600c546001146119135760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560065460075460085460408051600160e01b6370a0823102815230600482015290516001600160a01b0394851694909316926119c592859287926119c0926001600160701b03169185916370a0823191602480820192602092909190829003018186803b15801561198857600080fd5b505afa15801561199c573d6000803e3d6000fd5b505050506040513d60208110156119b257600080fd5b50519063ffffffff611e0416565b611beb565b60085460408051600160e01b6370a082310281523060048201529051611a2f92849287926119c092600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b15801561198857600080fd5b50506001600c5550565b6005546001600160a01b031681565b6007546001600160a01b031681565b600460209081526000928352604080842090915290825290205481565b600c54600114611ace5760408051600160e51b62461bcd02815260206004820152601160248201527f556e697377617056323a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560065460408051600160e01b6370a082310281523060048201529051611be4926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611b2257600080fd5b505afa158015611b36573d6000803e3d6000fd5b505050506040513d6020811015611b4c57600080fd5b505160075460408051600160e01b6370a0823102815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611b9c57600080fd5b505afa158015611bb0573d6000803e3d6000fd5b505050506040513d6020811015611bc657600080fd5b50516008546001600160701b0380821691600160701b900416611e46565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310611cb15780518252601f199092019160209182019101611c92565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d13576040519150601f19603f3d011682016040523d82523d6000602084013e611d18565b606091505b5091509150818015611d46575080511580611d465750808060200190516020811015611d4357600080fd5b50515b611d9a5760408051600160e51b62461bcd02815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b600082611db057506000610b6d565b82820282848281611dbd57fe5b0414611dfd57604051600160e51b62461bcd0281526004018080602001828103825260218152602001806128286021913960400191505060405180910390fd5b9392505050565b6000611dfd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506125a4565b6001600160701b038411801590611e6457506001600160701b038311155b611eb85760408051600160e51b62461bcd02815260206004820152601360248201527f556e697377617056323a204f564552464c4f5700000000000000000000000000604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b90048116820390811615801590611ee857506001600160701b03841615155b8015611efc57506001600160701b03831615155b15611f6d578063ffffffff16611f2a85611f158661263e565b6001600160e01b03169063ffffffff61265016565b600980546001600160e01b03929092169290920201905563ffffffff8116611f5584611f158761263e565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff16600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166000908152600360205260409020546120b1908263ffffffff611e0416565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546120e6908263ffffffff61267516565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561219357600080fd5b505afa1580156121a7573d6000803e3d6000fd5b505050506040513d60208110156121bd57600080fd5b5051600554604080517f0d43e8ad00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b0390921691630d43e8ad91600480820192602092909190829003018186803b15801561222357600080fd5b505afa158015612237573d6000803e3d6000fd5b505050506040513d602081101561224d57600080fd5b5051600554604080517f672a9f8d00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b039092169163672a9f8d91600480820192602092909190829003018186803b1580156122b357600080fd5b505afa1580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b505190506001600160a01b0383161580159061230157506001600160a01b03821615155b801561231557506001600160a01b03811615155b600b5490945084156123f25780156123ed576000612348610fdf6001600160701b038a8116908a1663ffffffff611da116565b9050600061235583612408565b9050808211156123ea576000612383612374848463ffffffff611e0416565b6002549063ffffffff611da116565b90506000612397848463ffffffff61267516565b905060008183816123a457fe5b04905080156123e657600681048060006123c2826109758682611e04565b90506123ce8c8461245a565b6123d88a8361245a565b6123e28b8261245a565b5050505b5050505b50505b6123fe565b80156123fe576000600b555b5050505092915050565b6000600382111561244b575080600160028204015b818110156124455780915060028182858161243457fe5b04018161243d57fe5b04905061241d565b50612455565b8115612455575060015b919050565b60025461246d908263ffffffff61267516565b6002556001600160a01b038216600090815260036020526040902054612499908263ffffffff61267516565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106125005781611dfd565b5090919050565b6001600160a01b038216600090815260036020526040902054612530908263ffffffff611e0416565b6001600160a01b03831660009081526003602052604090205560025461255c908263ffffffff611e0416565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000818484111561263657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125fb5781810151838201526020016125e3565b50505050905090810190601f1680156126285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161266d57fe5b049392505050565b600082820183811015611dfd5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061271357805160ff1916838001178555612740565b82800160010185558215612740579182015b82811115612740578251825591602001919060010190612725565b5061274c929150612750565b5090565b61276a91905b8082111561274c5760008155600101612756565b9056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a7230582054e1bed76916c997cf068bebd5f7845c7ca5984d0d4e14db172b41025c8bbb6b0029a165627a7a72305820b96e6a55d9fafc964dbbd4925ddbb0382e0ecd32e005c3298aff097c4716926f0029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "createPair(address,address)": {
        "notice": "create pair with default decimals(18)"
      },
      "createPair(address,address,uint8)": {
        "notice": "create pair with custom decimals. Can only be called by migrator"
      }
    }
  }
}