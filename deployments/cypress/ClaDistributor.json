{
  "address": "0xE9e1031eEAA5817E4706BE294c3Bb4681FDb2447",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "clsRewardRatio",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bonusEndBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "rewarder_",
          "type": "address"
        }
      ],
      "name": "setRewarder",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "user",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "from",
          "type": "uint256"
        },
        {
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "claPerBlocks",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDebt",
      "outputs": [
        {
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cla",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "name": "accClaPerShare",
          "type": "uint256"
        },
        {
          "name": "lastRewardBlock",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pendingCla",
      "outputs": [
        {
          "name": "pending",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cls",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "miningTreasury",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "miningTreasury_",
          "type": "address"
        }
      ],
      "name": "setMiningTreasury",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "clsRewardRatio_",
          "type": "uint256"
        },
        {
          "name": "withUpdate",
          "type": "bool"
        }
      ],
      "name": "setClsRewardRatio",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "claPerBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewarder",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "user",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "cls_",
          "type": "address"
        },
        {
          "name": "cla_",
          "type": "address"
        },
        {
          "name": "miningTreasury_",
          "type": "address"
        },
        {
          "name": "rewarder_",
          "type": "address"
        },
        {
          "name": "startBlock_",
          "type": "uint256"
        },
        {
          "name": "migrationEndBlock_",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "clsSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "accClaPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "clsRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "UpdateClsRewardRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "SetRewarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x3345f2de25fac03b1544f8724e3f67c6a4339a9c1b5a3eb64cc0bf5f1c186b82",
  "receipt": {
    "to": null,
    "from": "0xed0E18F99b684009fcF44c80E471717335aC49C9",
    "contractAddress": "0xE9e1031eEAA5817E4706BE294c3Bb4681FDb2447",
    "transactionIndex": 2,
    "gasUsed": "2094072",
    "logsBloom": "0x
    "blockHash": "0xbb6b20c7daea6e74f06f55de1efc2ac8ae1848b53f55c7b9e29814a92cf1bbe2",
    "transactionHash": "0x3345f2de25fac03b1544f8724e3f67c6a4339a9c1b5a3eb64cc0bf5f1c186b82",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 79121423,
        "transactionHash": "0x3345f2de25fac03b1544f8724e3f67c6a4339a9c1b5a3eb64cc0bf5f1c186b82",
        "address": "0xE9e1031eEAA5817E4706BE294c3Bb4681FDb2447",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed0e18f99b684009fcf44c80e471717335ac49c9"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xbb6b20c7daea6e74f06f55de1efc2ac8ae1848b53f55c7b9e29814a92cf1bbe2"
      }
    ],
    "blockNumber": 79121423,
    "cumulativeGasUsed": "2094072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F5dEC0d6402408eE81f52ab985a9C665b6e6010",
    "0xCF87f94fD8F6B6f0b479771F10dF672f99eADa63",
    "0x54FB37b0D56D837BC021d89f3cd833dE87BAf09e",
    "0x0000000000000000000000000000000000000000",
    "77915200",
    "79124800"
  ],
  "solcInputHash": "0cc9ebcf1c4519c468b5231cdb972881",
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"clsRewardRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rewarder_\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"claPerBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDebt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cla\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"name\":\"accClaPerShare\",\"type\":\"uint256\"},{\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCla\",\"outputs\":[{\"name\":\"pending\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cls\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTreasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"miningTreasury_\",\"type\":\"address\"}],\"name\":\"setMiningTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clsRewardRatio_\",\"type\":\"uint256\"},{\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"setClsRewardRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"cls_\",\"type\":\"address\"},{\"name\":\"cla_\",\"type\":\"address\"},{\"name\":\"miningTreasury_\",\"type\":\"address\"},{\"name\":\"rewarder_\",\"type\":\"address\"},{\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"name\":\"migrationEndBlock_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clsSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accClaPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clsRewardRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateClsRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"SetRewarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"cla_\":\"The CLA token contract address.\",\"cls_\":\"The CLS token contract address.\",\"migrationEndBlock_\":\"Migration end block of masterChef. (must be same to masterChef's one)\",\"miningTreasury_\":\"Contract address of CLA treasury.\",\"rewarder_\":\"Contract address of Airdroper.\",\"startBlock_\":\"Start block of masterChef. (must be same to masterChef's one)\"}},\"deposit(address,uint256)\":{\"params\":{\"amount\":\"CLS token amount to deposit.\",\"user\":\"The receiver of `amount` deposit benefit.\"}},\"harvest(address)\":{\"details\":\"Harvest proceeds for transaction sender to `to`.\",\"params\":{\"to\":\"Receiver of CLA rewards.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingCla(address)\":{\"params\":{\"user\":\"Address of user.\"},\"return\":\"Pending CLA reward for a given user.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setClsRewardRatio(uint256,bool)\":{\"params\":{\"clsRewardRatio_\":\"Cls reward ratio.\",\"withUpdate\":\"Update pool flag.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"CLS token amount to withdraw.\",\"user\":\"Receiver of the CLS tokens.\"}}},\"title\":\"CLA MasterChef of CLS. distribute CLA tokens to CLS holders * References: * - https://github.com/sushiswap/sushiswap/blob/canary/contracts/MasterChefV2.sol\"},\"userdoc\":{\"methods\":{\"claPerBlock()\":{\"notice\":\"Number of tokens created per block.\"},\"claPerBlocks(uint256,uint256)\":{\"notice\":\"Number of tokens created between the given _from to _to blocks.\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit CLS tokens.\"},\"pendingCla(address)\":{\"notice\":\"View function to see pending CLA.\"},\"setClsRewardRatio(uint256,bool)\":{\"notice\":\"Set cls reward ratio.\"},\"setMiningTreasury(address)\":{\"notice\":\"Set MiningTreasury\"},\"setRewarder(address)\":{\"notice\":\"Set Rewarder (airdroper)\"},\"updatePool()\":{\"notice\":\"Update accumulated reward per block of the pool.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw CLS tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CLS/ClaDistributor.sol\":\"ClaDistributor\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"contracts/CLA/ClaimToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\nimport '../codes/ERC20.sol';\\nimport '../codes/Ownable.sol';\\n\\ninterface ITreasury {\\n    function setCla(address) external;\\n}\\n\\n/**\\n * @title CLA token.\\n * No delegation thru signing.\\n *\\n * References:\\n *\\n * - https://github.com/sushiswap/sushiswap/blob/master/contracts/SushiToken.sol\\n */\\ncontract ClaimToken is ERC20('ClaimSwap', 'CLA'), Ownable {\\n    /// @notice Total token amounts.\\n    uint256 private constant TOTAL_TOKEN_AMOUNT = 186624000e18;\\n    uint256 private constant MINING_TOKEN_AMOUNT =\\n        (TOTAL_TOKEN_AMOUNT / 10) * 6; //111974400e18;\\n\\n    bool public paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by owner\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by owner.\\n     */\\n    event Unpaused();\\n\\n    /// @notice Creates `TOTAL_AMOUNT` token to `_treasury`.\\n    /// Must only be called by the owner (MasterChef).\\n    constructor(ITreasury miningTreasury, ITreasury treasury) public {\\n        treasury.setCla(address(this));\\n        miningTreasury.setCla(address(this));\\n        _mint(address(miningTreasury), MINING_TOKEN_AMOUNT);\\n        _mint(address(treasury), TOTAL_TOKEN_AMOUNT - MINING_TOKEN_AMOUNT);\\n    }\\n    \\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { \\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused, 'paused');\\n    }\\n  \\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() public onlyOwner {\\n        require(!paused, 'already paused');\\n        paused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() public onlyOwner {\\n        require(paused, 'already unpaused');\\n        paused = false;\\n        emit Unpaused();\\n    }\\n}\",\"keccak256\":\"0x381ba260be3399dd9cdad014042de3db2f25d47498f01d81a420bd221949c11b\"},\"contracts/CLS/ClaDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libraries/SignedSafeMath.sol\\\";\\nimport \\\"../libraries/SafeCast.sol\\\";\\nimport \\\"../interfaces/IRewarder.sol\\\";\\nimport \\\"../codes/Ownable.sol\\\";\\nimport \\\"../CLA/ClaimToken.sol\\\";\\nimport \\\"../interfaces/IMiningTreasury.sol\\\";\\n\\n/**\\n * @title CLA MasterChef of CLS.\\n * distribute CLA tokens to CLS holders\\n *\\n *\\n * References:\\n *\\n * - https://github.com/sushiswap/sushiswap/blob/canary/contracts/MasterChefV2.sol\\n */\\ncontract ClaDistributor is Ownable {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n\\n    struct PoolInfo {\\n        uint256 accClaPerShare;\\n        uint256 lastRewardBlock;\\n    }\\n\\n    /// @notice Info of each user's rewardDebt.\\n    /// `rewardDebt` The amount of CLA entitled to the user.\\n    mapping(address => int256) public rewardDebt;\\n    /// @notice Address of CLS contract.\\n    address public cls;\\n    /// @notice Address of CLA contract.\\n    ClaimToken public cla;\\n    /// @notice treasury address of CLA tokens.\\n    IMiningTreasury public miningTreasury;\\n    /// @notice Address of `IRewarder` contract.\\n    IRewarder public rewarder;\\n    /// @notice Info of pool.\\n    PoolInfo public poolInfo;\\n\\n    /// @notice Block at the start of CLA mining\\n    uint256 public startBlock;\\n    /// @notice Reward ratio between LP staker and CLA staker\\n    uint256 public clsRewardRatio;\\n    uint256 public bonusEndBlock;\\n    uint256 private constant BONUS_MULTIPLIER = 2;\\n    uint256 private constant CLA_REWARD_RATIO_DIVISOR = 1e12;\\n    uint256 private constant ACC_CLA_PRECISION = 1e12;\\n    uint256 private constant YEAR = 12 * 30 * 24 * 60 * 60;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Harvest(address indexed user, uint256 amount, address indexed to);\\n    event UpdatePool(uint256 clsSupply, uint256 accClaPerShare);\\n    event UpdateClsRewardRatio(uint256 clsRewardRatio);\\n    event SetRewarder(address indexed rewarder);\\n\\n    /// @param cls_ The CLS token contract address.\\n    /// @param cla_ The CLA token contract address.\\n    /// @param miningTreasury_ Contract address of CLA treasury.\\n    /// @param rewarder_ Contract address of Airdroper.\\n    /// @param startBlock_ Start block of masterChef. (must be same to masterChef's one)\\n    /// @param migrationEndBlock_ Migration end block of masterChef. (must be same to masterChef's one)\\n    constructor(\\n        address cls_,\\n        ClaimToken cla_,\\n        IMiningTreasury miningTreasury_,\\n        IRewarder rewarder_,\\n        uint256 startBlock_,\\n        uint256 migrationEndBlock_\\n    ) public {\\n        cls = cls_;\\n        cla = cla_;\\n        miningTreasury = miningTreasury_;\\n        rewarder = rewarder_;\\n        poolInfo.lastRewardBlock = migrationEndBlock_;\\n        startBlock = startBlock_;\\n        bonusEndBlock = migrationEndBlock_.add(\\n            migrationEndBlock_.sub(startBlock_)\\n        );\\n    }\\n\\n    /// @notice Number of tokens created per block.\\n    function claPerBlock() public view returns (uint256) {\\n        return _claPerBlock(block.number);\\n    }\\n\\n    /// @notice Number of tokens created per block.\\n    function _claPerBlock(uint256 blockNumber) internal view returns (uint256) {\\n        if (blockNumber < startBlock + 2 * YEAR) {\\n            return ((9e17 / CLA_REWARD_RATIO_DIVISOR) * clsRewardRatio);\\n        } else if (blockNumber < startBlock + 2 * 2 * YEAR) {\\n            return ((6e17 / CLA_REWARD_RATIO_DIVISOR) * clsRewardRatio);\\n        } else if (blockNumber < startBlock + 2 * 3 * YEAR) {\\n            return ((3e17 / CLA_REWARD_RATIO_DIVISOR) * clsRewardRatio);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Number of tokens created between the given _from to _to blocks.\\n    function claPerBlocks(uint256 from, uint256 to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(from <= to);\\n        if (from < bonusEndBlock) {\\n            uint256 claPerBlockFrom = _claPerBlock(from).mul(BONUS_MULTIPLIER);\\n            uint256 claPerBlockTo = _claPerBlock(to);\\n            if (to <= bonusEndBlock) {\\n                return to.sub(from).mul(claPerBlockFrom);\\n            }\\n            return\\n                claPerBlockFrom.mul(bonusEndBlock.sub(from)).add(\\n                    claPerBlockTo.mul(to.sub(bonusEndBlock))\\n                );\\n        } else {\\n            uint256 claPerBlockFrom = _claPerBlock(from);\\n            uint256 claPerBlockTo = _claPerBlock(to);\\n            if (claPerBlockFrom == claPerBlockTo)\\n                return to.sub(from).mul(claPerBlockFrom);\\n            uint256 boundary = (to.sub(startBlock) / (2 * YEAR)).mul(2 * YEAR).add(\\n                startBlock\\n            );\\n            return\\n                claPerBlockFrom.mul(boundary.sub(from)).add(\\n                    claPerBlockTo.mul(to.sub(boundary))\\n                );\\n        }\\n    }\\n\\n    /// @notice Set cls reward ratio.\\n    /// @param clsRewardRatio_ Cls reward ratio.\\n    /// @param withUpdate Update pool flag.\\n    function setClsRewardRatio(uint256 clsRewardRatio_, bool withUpdate)\\n        public\\n    {\\n        require(msg.sender == address(miningTreasury), \\\"not mining treasury\\\");\\n        if (withUpdate) {\\n            updatePool();\\n        }\\n        clsRewardRatio = clsRewardRatio_;\\n        emit UpdateClsRewardRatio(clsRewardRatio);\\n    }\\n\\n    /// @notice View function to see pending CLA.\\n    /// @param user Address of user.\\n    /// @return Pending CLA reward for a given user.\\n    function pendingCla(address user) external view returns (uint256 pending) {\\n        uint256 accClaPerShare = poolInfo.accClaPerShare;\\n        uint256 clsSupply = IERC20(cls).totalSupply();\\n        if (block.number > poolInfo.lastRewardBlock && clsSupply != 0) {\\n            uint256 claReward = claPerBlocks(\\n                poolInfo.lastRewardBlock,\\n                block.number\\n            );\\n\\n            if (claReward != 0) {\\n                accClaPerShare = accClaPerShare.add(\\n                    (claReward.mul(ACC_CLA_PRECISION) / clsSupply)\\n                );\\n            }\\n        }\\n        pending = int256(\\n            IERC20(cls).balanceOf(user).mul(accClaPerShare) / ACC_CLA_PRECISION\\n        ).sub(rewardDebt[user]).toUint256();\\n    }\\n\\n    /// @notice Update accumulated reward per block of the pool.\\n    function updatePool() public {\\n        if (block.number > poolInfo.lastRewardBlock) {\\n            uint256 clsSupply = IERC20(cls).totalSupply();\\n            if (clsSupply > 0) {\\n                uint256 claReward = claPerBlocks(\\n                    poolInfo.lastRewardBlock,\\n                    block.number\\n                );\\n\\n                if (claReward != 0) {\\n                    miningTreasury.transfer(claReward);\\n                    poolInfo.accClaPerShare = poolInfo.accClaPerShare.add(\\n                        (claReward.mul(ACC_CLA_PRECISION) / clsSupply)\\n                    );\\n                }\\n            }\\n            poolInfo.lastRewardBlock = block.number;\\n            emit UpdatePool(clsSupply, poolInfo.accClaPerShare);\\n        }\\n    }\\n\\n    /// @notice Deposit CLS tokens.\\n    /// @param user The receiver of `amount` deposit benefit.\\n    /// @param amount CLS token amount to deposit.\\n    function deposit(address user, uint256 amount) public {\\n        require(msg.sender == cls);\\n        updatePool();\\n        rewardDebt[user] = rewardDebt[user].add(\\n            int256(amount.mul(poolInfo.accClaPerShare) / ACC_CLA_PRECISION)\\n        );\\n\\n        IRewarder _rewarder = rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onClaReward(0, user, user, 0, IERC20(cls).balanceOf(user));\\n        }\\n\\n        emit Deposit(user, amount);\\n    }\\n\\n    /// @notice Withdraw CLS tokens.\\n    /// @param user Receiver of the CLS tokens.\\n    /// @param amount CLS token amount to withdraw.\\n    function withdraw(address user, uint256 amount) public {\\n        require(msg.sender == cls);\\n        updatePool();\\n        rewardDebt[user] = rewardDebt[user].sub(\\n            int256(amount.mul(poolInfo.accClaPerShare) / ACC_CLA_PRECISION)\\n        );\\n\\n        IRewarder _rewarder = rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onClaReward(0, user, user, 0, IERC20(cls).balanceOf(user));\\n        }\\n        emit Withdraw(user, amount);\\n    }\\n\\n    /// @dev Harvest proceeds for transaction sender to `to`.\\n    /// @param to Receiver of CLA rewards.\\n    function harvest(address to) public {\\n        updatePool();\\n        PoolInfo memory pool = poolInfo;\\n        int256 accumulatedCla = int256(\\n            IERC20(cls).balanceOf(msg.sender).mul(pool.accClaPerShare) /\\n                ACC_CLA_PRECISION\\n        );\\n        uint256 _pendingCla = accumulatedCla\\n            .sub(rewardDebt[msg.sender])\\n            .toUint256();\\n        rewardDebt[msg.sender] = accumulatedCla;\\n        if (_pendingCla != 0) {\\n            _safeClaTransfer(to, _pendingCla);\\n        }\\n        IRewarder _rewarder = rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onClaReward(\\n                0,\\n                msg.sender,\\n                to,\\n                _pendingCla,\\n                IERC20(cls).balanceOf(msg.sender)\\n            );\\n        }\\n        emit Harvest(msg.sender, _pendingCla, to);\\n    }\\n\\n    /// @notice Safe CLA transfer function, just in case if rounding error causes pool to not have enough CLAs.\\n    /// @param to Address of cla reciever\\n    /// @param amount Amount of cla to transfer\\n    function _safeClaTransfer(address to, uint256 amount) internal {\\n        uint256 claBalance = cla.balanceOf(address(this));\\n        if (amount > claBalance) {\\n            cla.transfer(to, claBalance);\\n        } else {\\n            cla.transfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Set Rewarder (airdroper)\\n    function setRewarder(IRewarder rewarder_) public onlyOwner {\\n        rewarder = rewarder_;\\n        emit SetRewarder(address(rewarder));\\n    }\\n\\n    /// @notice Set MiningTreasury\\n    function setMiningTreasury(IMiningTreasury miningTreasury_) public onlyOwner {\\n        miningTreasury = miningTreasury_;\\n    }\\n}\\n\",\"keccak256\":\"0xff281975f22452ff4471193647a2716fe323e21b0ba07e27930326fb2744a34c\"},\"contracts/codes/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender, \\n            msg.sender, \\n            _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            msg.sender, \\n            spender, \\n            _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        \\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n        \\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n        \\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }\\n    \\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal { }\\n\\n}\\n\",\"keccak256\":\"0xa40d8794fb503a92319fac2b50e0934eb33a96a0d5d48d3988335edbaa867e26\"},\"contracts/codes/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n * \\n * Reference:\\n * \\n * - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/access/Ownable.sol\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb066925af388797de1160b7ac2b460194b3575b7eec15ecd2643b398423f5b90\"},\"contracts/interfaces/IMiningTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\ninterface IMiningTreasury {\\n    function transfer(uint256 value) external;\\n}\\n\",\"keccak256\":\"0x9100c148aa5637f760e6114abc43ef7e63b26066d867164349ece0b62902dbb7\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onClaReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 sushiAmount,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 sushiAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0xbb9b4eca2ba0d74747d758501efefb34040df6f66949630cc985248bb78fb687\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and then downcasting.\\n *\\n * _Available since v2.5.0._\\n */\\nlibrary SafeCast {\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value < 2**248, \\\"SafeCast: value doesn\\\\'t fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n    \\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n}\",\"keccak256\":\"0x966f68de5947ee5cf1fc342c99ff7472998beb95eb49342f2fdc4d5e0d165eb8\"},\"contracts/libraries/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n * \\n * References:\\n * \\n * - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/math/SignedSafeMath.sol\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\",\"keccak256\":\"0x006ba5bca35800e2828080eaf687acb329afd319ac39574d5d3c7bebea78ec8c\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405160c08062001ee5833981018060405262000033919081019062000218565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b03199081166001600160a01b03898116919091179092556003805482168884161790556004805482168784161790556005805490911691851691909117905560078190556008829055620000f9620000e4828462000109602090811b6200141917901c565b826200015a60201b6200145b1790919060201c565b600a5550620003c5945050505050565b60006200015383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250620001a560201b60201c565b9392505050565b60008282018381101562000153576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019c906200033a565b60405180910390fd5b60008184841115620001e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019c919062000327565b505050900390565b60006200015382516200035f565b60006200015382516200036c565b600062000153825162000385565b60008060008060008060c087890312156200023257600080fd5b6000620002408989620001ee565b96505060206200025389828a01620001fc565b95505060406200026689828a01620001fc565b94505060606200027989828a01620001fc565b93505060806200028c89828a016200020a565b92505060a06200029f89828a016200020a565b9150509295509295509295565b6000620002b98262000352565b620002c5818562000356565b9350620002d781856020860162000388565b620002e281620003bb565b9093019392505050565b6000620002fb601b8362000356565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60208082528101620001538184620002ac565b602080825281016200034c81620002ec565b92915050565b5190565b90815260200190565b60006200034c8262000379565b60006200034c826200035f565b6001600160a01b031690565b90565b60005b83811015620003a55781810151838201526020016200038b565b83811115620003b5576000848401525b50505050565b601f01601f191690565b611b1080620003d56000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806377b170f2116100d8578063b72366941161008c578063e3161ddd11610066578063e3161ddd146102b7578063f2fde38b146102bf578063f3fef3a3146102d257610182565b8063b723669414610294578063bb68742e146102a7578063dcc3e06e146102af57610182565b8063929f18e4116100bd578063929f18e414610271578063b08710d714610279578063b54f8a921461028157610182565b806377b170f2146102495780638da5cb5b1461025c57610182565b806348cd4cb11161013a5780635884cd80116101145780635884cd80146102165780635a2f3d091461022b578063715018a61461024157610182565b806348cd4cb1146101e857806355f8a601146101f05780635873eb9b1461020357610182565b80631aed65531161016b5780631aed6553146101ba5780633a6462e4146101c257806347e7ef24146101d557610182565b806308f97c05146101875780630e5c011e146101a5575b600080fd5b61018f6102e5565b60405161019c9190611925565b60405180910390f35b6101b86101b3366004611514565b6102eb565b005b61018f61055c565b6101b86101d036600461158a565b610562565b6101b86101e3366004611532565b6105fa565b61018f6107bc565b61018f6101fe3660046115f6565b6107c2565b61018f610211366004611514565b610936565b61021e610948565b60405161019c9190611917565b610233610957565b60405161019c929190611a45565b6101b8610960565b61018f610257366004611514565b6109e9565b610264610b62565b60405161019c91906118e0565b610264610b71565b61021e610b80565b6101b861028f36600461158a565b610b8f565b6101b86102a23660046115c6565b610bf0565b61018f610c6c565b61021e610c7c565b6101b8610c8b565b6101b86102cd366004611514565b610e44565b6101b86102e0366004611532565b610f07565b60095481565b6102f3610c8b565b6102fb6114b2565b5060408051808201825260065480825260075460208301526002549251600160e01b6370a08231028152919260009264e8d4a51000926103b39290916001600160a01b03909116906370a08231906103579033906004016118ee565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a791908101906115a8565b9063ffffffff6110bc16565b816103ba57fe5b33600090815260016020526040812054929091049250906103eb906103e690849063ffffffff61110016565b611149565b3360009081526001602052604090208390559050801561040f5761040f8482611176565b6005546001600160a01b0316801561050a57600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb9260009233928b928992909116906370a08231906104679086906004016118ee565b60206040518083038186803b15801561047f57600080fd5b505afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104b791908101906115a8565b6040518663ffffffff1660e01b81526004016104d7959493929190611933565b600060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b505050505b846001600160a01b0316336001600160a01b03167f49e6aa9a971bb7d18b2ede509ae7267a8861aae4e7c444a27af1d3037d7391178460405161054d9190611925565b60405180910390a35050505050565b600a5481565b3361056b610b62565b6001600160a01b03161461059d57604051600160e51b62461bcd02815260040161059490611a25565b60405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fcf0aff36caea97f7ad632b334936cb196014c193ac1a790b578f12a70d9836db90600090a250565b6002546001600160a01b0316331461061157600080fd5b610619610c8b565b6006546106669064e8d4a510009061063890849063ffffffff6110bc16565b8161063f57fe5b6001600160a01b03851660009081526001602052604090205491900463ffffffff61134b16565b6001600160a01b0380841660009081526001602052604090209190915560055416801561077657600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb92600092889283928592909116906370a08231906106d39085906004016118e0565b60206040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061072391908101906115a8565b6040518663ffffffff1660e01b815260040161074395949392919061197f565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505050505b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516107af9190611925565b60405180910390a2505050565b60085481565b6000818311156107d157600080fd5b600a548310156108785760006107eb60026103a786611394565b905060006107f884611394565b9050600a54841161082057610817826103a7868863ffffffff61141916565b92505050610930565b61081761084861083b600a548761141990919063ffffffff16565b839063ffffffff6110bc16565b600a5461086c9061085f908963ffffffff61141916565b859063ffffffff6110bc16565b9063ffffffff61145b16565b600061088384611394565b9050600061089084611394565b9050808214156108ae57610817826103a7868863ffffffff61141916565b6008546000906108e59061086c6303b53800806108d18a8563ffffffff61141916565b816108d857fe5b049063ffffffff6110bc16565b905061092a61090a6108fd878463ffffffff61141916565b849063ffffffff6110bc16565b61086c61091d848a63ffffffff61141916565b869063ffffffff6110bc16565b93505050505b92915050565b60016020526000908152604090205481565b6003546001600160a01b031681565b60065460075482565b33610969610b62565b6001600160a01b03161461099257604051600160e51b62461bcd02815260040161059490611a25565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600654600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000939284926001600160a01b03909116916318160ddd91600480820192602092909190829003018186803b158015610a5057600080fd5b505afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a8891908101906115a8565b60075490915043118015610a9b57508015155b15610aed576000610ab1600660010154436107c2565b90508015610aeb57610ae882610ad28364e8d4a5100063ffffffff6110bc16565b81610ad957fe5b8591900463ffffffff61145b16565b92505b505b6001600160a01b0380851660009081526001602052604090819020546002549151600160e01b6370a08231028152610b5a936103e69364e8d4a5100092610b4692899216906370a0823190610357908d906004016118e0565b81610b4d57fe5b049063ffffffff61110016565b949350505050565b6000546001600160a01b031690565b6002546001600160a01b031681565b6004546001600160a01b031681565b33610b98610b62565b6001600160a01b031614610bc157604051600160e51b62461bcd02815260040161059490611a25565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610c1d57604051600160e51b62461bcd028152600401610594906119c5565b8015610c2b57610c2b610c8b565b60098290556040517f58d56be878db086f4227d5c3049e8059f19a10f95dfe6861b720a6adc310463e90610c60908490611925565b60405180910390a15050565b6000610c7743611394565b905090565b6005546001600160a01b031681565b600754431115610e4257600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2b91908101906115a8565b90508015610e00576000610d44600660010154436107c2565b90508015610dfe57600480546040517f12514bba0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916312514bba91610d9491859101611925565b600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b50505050610dfa82610de264e8d4a51000846110bc90919063ffffffff16565b81610de957fe5b60065491900463ffffffff61145b16565b6006555b505b436007556006546040517fb35b339eddbb63628f41e89a03d766f91076301cf1fef334e1dbd88de63fc18691610e3891849190611a45565b60405180910390a1505b565b33610e4d610b62565b6001600160a01b031614610e7657604051600160e51b62461bcd02815260040161059490611a25565b6001600160a01b038116610e9f57604051600160e51b62461bcd028152600401610594906119d5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610f1e57600080fd5b610f26610c8b565b600654610f739064e8d4a5100090610f4590849063ffffffff6110bc16565b81610f4c57fe5b6001600160a01b03851660009081526001602052604090205491900463ffffffff61110016565b6001600160a01b0380841660009081526001602052604090209190915560055416801561108357600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb92600092889283928592909116906370a0823190610fe09085906004016118e0565b60206040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103091908101906115a8565b6040518663ffffffff1660e01b815260040161105095949392919061197f565b600060405180830381600087803b15801561106a57600080fd5b505af115801561107e573d6000803e3d6000fd5b505050505b826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516107af9190611925565b6000826110cb57506000610930565b828202828482816110d857fe5b04146110f957604051600160e51b62461bcd02815260040161059490611a15565b9392505050565b60008183038183128015906111155750838113155b8061112a575060008312801561112a57508381135b6110f957604051600160e51b62461bcd02815260040161059490611a35565b60008082121561116e57604051600160e51b62461bcd02815260040161059490611a05565b50805b919050565b600354604051600160e01b6370a082310281526000916001600160a01b0316906370a08231906111aa9030906004016118e0565b60206040518083038186803b1580156111c257600080fd5b505afa1580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111fa91908101906115a8565b9050808211156112a7576003546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb9061124f90869085906004016118fc565b602060405180830381600087803b15801561126957600080fd5b505af115801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a1919081019061156c565b50611346565b6003546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb906112f290869086906004016118fc565b602060405180830381600087803b15801561130c57600080fd5b505af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611344919081019061156c565b505b505050565b60008282018183128015906113605750838112155b80611375575060008312801561137557508381125b6110f957604051600160e51b62461bcd028152600401610594906119f5565b6008546000906303b53800018210156113c35760095464e8d4a51000670c7d713b49da00005b04029050611171565b60085463076a7000018210156113ea5760095464e8d4a51000670853a0d2313c00006113ba565b600854630b1fa800018210156114115760095464e8d4a51000670429d069189e00006113ba565b506000611171565b60006110f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611483565b6000828201838110156110f957604051600160e51b62461bcd028152600401610594906119e5565b600081848411156114aa57604051600160e51b62461bcd02815260040161059491906119b4565b505050900390565b604051806040016040528060008152602001600081525090565b60006110f98235611a60565b60006110f98235611a7a565b60006110f98251611a7a565b60006110f98235611a7f565b60006110f98235611a6b565b60006110f98251611a6b565b60006020828403121561152657600080fd5b6000610b5a84846114cc565b6000806040838503121561154557600080fd5b600061155185856114cc565b9250506020611562858286016114fc565b9150509250929050565b60006020828403121561157e57600080fd5b6000610b5a84846114e4565b60006020828403121561159c57600080fd5b6000610b5a84846114f0565b6000602082840312156115ba57600080fd5b6000610b5a8484611508565b600080604083850312156115d957600080fd5b60006115e585856114fc565b9250506020611562858286016114d8565b6000806040838503121561160957600080fd5b600061155185856114fc565b61161e81611a8a565b82525050565b61161e81611a60565b61161e81611a7f565b61161e81611a6b565b61161e81611a95565b600061165382611a53565b61165d8185611a57565b935061166d818560208601611aa0565b61167681611acc565b9093019392505050565b600061168d601383611a57565b7f6e6f74206d696e696e6720747265617375727900000000000000000000000000815260200192915050565b60006116c6602683611a57565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015260400192915050565b6000611725601b83611a57565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b600061175e602183611a57565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006117bd602083611a57565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665815260200192915050565b60006117f6602183611a57565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000611855602083611a57565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b600061188e602483611a57565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f76657281527f666c6f7700000000000000000000000000000000000000000000000000000000602082015260400192915050565b602081016109308284611624565b602081016109308284611615565b6040810161190a8285611624565b6110f96020830184611636565b60208101610930828461162d565b602081016109308284611636565b60a08101611941828861163f565b61194e6020830187611615565b61195b6040830186611624565b6119686060830185611636565b6119756080830184611636565b9695505050505050565b60a0810161198d828861163f565b61199a6020830187611624565b6119a76040830186611624565b611968606083018561163f565b602080825281016110f98184611648565b6020808252810161093081611680565b60208082528101610930816116b9565b6020808252810161093081611718565b6020808252810161093081611751565b60208082528101610930816117b0565b60208082528101610930816117e9565b6020808252810161093081611848565b6020808252810161093081611881565b6040810161190a8285611636565b5190565b90815260200190565b600061093082611a6e565b90565b6001600160a01b031690565b151590565b600061093082611a60565b600061093082611a7f565b600061093082611a6b565b60005b83811015611abb578181015183820152602001611aa3565b838111156113445750506000910152565b601f01601f19169056fea265627a7a7230582067610340d195579cc28e9d11398b1e0461e735c5a7df70268772668d5b21ac596c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806377b170f2116100d8578063b72366941161008c578063e3161ddd11610066578063e3161ddd146102b7578063f2fde38b146102bf578063f3fef3a3146102d257610182565b8063b723669414610294578063bb68742e146102a7578063dcc3e06e146102af57610182565b8063929f18e4116100bd578063929f18e414610271578063b08710d714610279578063b54f8a921461028157610182565b806377b170f2146102495780638da5cb5b1461025c57610182565b806348cd4cb11161013a5780635884cd80116101145780635884cd80146102165780635a2f3d091461022b578063715018a61461024157610182565b806348cd4cb1146101e857806355f8a601146101f05780635873eb9b1461020357610182565b80631aed65531161016b5780631aed6553146101ba5780633a6462e4146101c257806347e7ef24146101d557610182565b806308f97c05146101875780630e5c011e146101a5575b600080fd5b61018f6102e5565b60405161019c9190611925565b60405180910390f35b6101b86101b3366004611514565b6102eb565b005b61018f61055c565b6101b86101d036600461158a565b610562565b6101b86101e3366004611532565b6105fa565b61018f6107bc565b61018f6101fe3660046115f6565b6107c2565b61018f610211366004611514565b610936565b61021e610948565b60405161019c9190611917565b610233610957565b60405161019c929190611a45565b6101b8610960565b61018f610257366004611514565b6109e9565b610264610b62565b60405161019c91906118e0565b610264610b71565b61021e610b80565b6101b861028f36600461158a565b610b8f565b6101b86102a23660046115c6565b610bf0565b61018f610c6c565b61021e610c7c565b6101b8610c8b565b6101b86102cd366004611514565b610e44565b6101b86102e0366004611532565b610f07565b60095481565b6102f3610c8b565b6102fb6114b2565b5060408051808201825260065480825260075460208301526002549251600160e01b6370a08231028152919260009264e8d4a51000926103b39290916001600160a01b03909116906370a08231906103579033906004016118ee565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a791908101906115a8565b9063ffffffff6110bc16565b816103ba57fe5b33600090815260016020526040812054929091049250906103eb906103e690849063ffffffff61110016565b611149565b3360009081526001602052604090208390559050801561040f5761040f8482611176565b6005546001600160a01b0316801561050a57600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb9260009233928b928992909116906370a08231906104679086906004016118ee565b60206040518083038186803b15801561047f57600080fd5b505afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104b791908101906115a8565b6040518663ffffffff1660e01b81526004016104d7959493929190611933565b600060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b505050505b846001600160a01b0316336001600160a01b03167f49e6aa9a971bb7d18b2ede509ae7267a8861aae4e7c444a27af1d3037d7391178460405161054d9190611925565b60405180910390a35050505050565b600a5481565b3361056b610b62565b6001600160a01b03161461059d57604051600160e51b62461bcd02815260040161059490611a25565b60405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691909117918290556040519116907fcf0aff36caea97f7ad632b334936cb196014c193ac1a790b578f12a70d9836db90600090a250565b6002546001600160a01b0316331461061157600080fd5b610619610c8b565b6006546106669064e8d4a510009061063890849063ffffffff6110bc16565b8161063f57fe5b6001600160a01b03851660009081526001602052604090205491900463ffffffff61134b16565b6001600160a01b0380841660009081526001602052604090209190915560055416801561077657600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb92600092889283928592909116906370a08231906106d39085906004016118e0565b60206040518083038186803b1580156106eb57600080fd5b505afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061072391908101906115a8565b6040518663ffffffff1660e01b815260040161074395949392919061197f565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505050505b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516107af9190611925565b60405180910390a2505050565b60085481565b6000818311156107d157600080fd5b600a548310156108785760006107eb60026103a786611394565b905060006107f884611394565b9050600a54841161082057610817826103a7868863ffffffff61141916565b92505050610930565b61081761084861083b600a548761141990919063ffffffff16565b839063ffffffff6110bc16565b600a5461086c9061085f908963ffffffff61141916565b859063ffffffff6110bc16565b9063ffffffff61145b16565b600061088384611394565b9050600061089084611394565b9050808214156108ae57610817826103a7868863ffffffff61141916565b6008546000906108e59061086c6303b53800806108d18a8563ffffffff61141916565b816108d857fe5b049063ffffffff6110bc16565b905061092a61090a6108fd878463ffffffff61141916565b849063ffffffff6110bc16565b61086c61091d848a63ffffffff61141916565b869063ffffffff6110bc16565b93505050505b92915050565b60016020526000908152604090205481565b6003546001600160a01b031681565b60065460075482565b33610969610b62565b6001600160a01b03161461099257604051600160e51b62461bcd02815260040161059490611a25565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600654600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000939284926001600160a01b03909116916318160ddd91600480820192602092909190829003018186803b158015610a5057600080fd5b505afa158015610a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a8891908101906115a8565b60075490915043118015610a9b57508015155b15610aed576000610ab1600660010154436107c2565b90508015610aeb57610ae882610ad28364e8d4a5100063ffffffff6110bc16565b81610ad957fe5b8591900463ffffffff61145b16565b92505b505b6001600160a01b0380851660009081526001602052604090819020546002549151600160e01b6370a08231028152610b5a936103e69364e8d4a5100092610b4692899216906370a0823190610357908d906004016118e0565b81610b4d57fe5b049063ffffffff61110016565b949350505050565b6000546001600160a01b031690565b6002546001600160a01b031681565b6004546001600160a01b031681565b33610b98610b62565b6001600160a01b031614610bc157604051600160e51b62461bcd02815260040161059490611a25565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610c1d57604051600160e51b62461bcd028152600401610594906119c5565b8015610c2b57610c2b610c8b565b60098290556040517f58d56be878db086f4227d5c3049e8059f19a10f95dfe6861b720a6adc310463e90610c60908490611925565b60405180910390a15050565b6000610c7743611394565b905090565b6005546001600160a01b031681565b600754431115610e4257600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2b91908101906115a8565b90508015610e00576000610d44600660010154436107c2565b90508015610dfe57600480546040517f12514bba0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916312514bba91610d9491859101611925565b600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b50505050610dfa82610de264e8d4a51000846110bc90919063ffffffff16565b81610de957fe5b60065491900463ffffffff61145b16565b6006555b505b436007556006546040517fb35b339eddbb63628f41e89a03d766f91076301cf1fef334e1dbd88de63fc18691610e3891849190611a45565b60405180910390a1505b565b33610e4d610b62565b6001600160a01b031614610e7657604051600160e51b62461bcd02815260040161059490611a25565b6001600160a01b038116610e9f57604051600160e51b62461bcd028152600401610594906119d5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610f1e57600080fd5b610f26610c8b565b600654610f739064e8d4a5100090610f4590849063ffffffff6110bc16565b81610f4c57fe5b6001600160a01b03851660009081526001602052604090205491900463ffffffff61110016565b6001600160a01b0380841660009081526001602052604090209190915560055416801561108357600254604051600160e01b6370a082310281526001600160a01b038381169263134ecffb92600092889283928592909116906370a0823190610fe09085906004016118e0565b60206040518083038186803b158015610ff857600080fd5b505afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103091908101906115a8565b6040518663ffffffff1660e01b815260040161105095949392919061197f565b600060405180830381600087803b15801561106a57600080fd5b505af115801561107e573d6000803e3d6000fd5b505050505b826001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364836040516107af9190611925565b6000826110cb57506000610930565b828202828482816110d857fe5b04146110f957604051600160e51b62461bcd02815260040161059490611a15565b9392505050565b60008183038183128015906111155750838113155b8061112a575060008312801561112a57508381135b6110f957604051600160e51b62461bcd02815260040161059490611a35565b60008082121561116e57604051600160e51b62461bcd02815260040161059490611a05565b50805b919050565b600354604051600160e01b6370a082310281526000916001600160a01b0316906370a08231906111aa9030906004016118e0565b60206040518083038186803b1580156111c257600080fd5b505afa1580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111fa91908101906115a8565b9050808211156112a7576003546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb9061124f90869085906004016118fc565b602060405180830381600087803b15801561126957600080fd5b505af115801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a1919081019061156c565b50611346565b6003546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a9059cbb906112f290869086906004016118fc565b602060405180830381600087803b15801561130c57600080fd5b505af1158015611320573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611344919081019061156c565b505b505050565b60008282018183128015906113605750838112155b80611375575060008312801561137557508381125b6110f957604051600160e51b62461bcd028152600401610594906119f5565b6008546000906303b53800018210156113c35760095464e8d4a51000670c7d713b49da00005b04029050611171565b60085463076a7000018210156113ea5760095464e8d4a51000670853a0d2313c00006113ba565b600854630b1fa800018210156114115760095464e8d4a51000670429d069189e00006113ba565b506000611171565b60006110f983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611483565b6000828201838110156110f957604051600160e51b62461bcd028152600401610594906119e5565b600081848411156114aa57604051600160e51b62461bcd02815260040161059491906119b4565b505050900390565b604051806040016040528060008152602001600081525090565b60006110f98235611a60565b60006110f98235611a7a565b60006110f98251611a7a565b60006110f98235611a7f565b60006110f98235611a6b565b60006110f98251611a6b565b60006020828403121561152657600080fd5b6000610b5a84846114cc565b6000806040838503121561154557600080fd5b600061155185856114cc565b9250506020611562858286016114fc565b9150509250929050565b60006020828403121561157e57600080fd5b6000610b5a84846114e4565b60006020828403121561159c57600080fd5b6000610b5a84846114f0565b6000602082840312156115ba57600080fd5b6000610b5a8484611508565b600080604083850312156115d957600080fd5b60006115e585856114fc565b9250506020611562858286016114d8565b6000806040838503121561160957600080fd5b600061155185856114fc565b61161e81611a8a565b82525050565b61161e81611a60565b61161e81611a7f565b61161e81611a6b565b61161e81611a95565b600061165382611a53565b61165d8185611a57565b935061166d818560208601611aa0565b61167681611acc565b9093019392505050565b600061168d601383611a57565b7f6e6f74206d696e696e6720747265617375727900000000000000000000000000815260200192915050565b60006116c6602683611a57565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015260400192915050565b6000611725601b83611a57565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b600061175e602183611a57565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006117bd602083611a57565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665815260200192915050565b60006117f6602183611a57565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000611855602083611a57565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572815260200192915050565b600061188e602483611a57565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f76657281527f666c6f7700000000000000000000000000000000000000000000000000000000602082015260400192915050565b602081016109308284611624565b602081016109308284611615565b6040810161190a8285611624565b6110f96020830184611636565b60208101610930828461162d565b602081016109308284611636565b60a08101611941828861163f565b61194e6020830187611615565b61195b6040830186611624565b6119686060830185611636565b6119756080830184611636565b9695505050505050565b60a0810161198d828861163f565b61199a6020830187611624565b6119a76040830186611624565b611968606083018561163f565b602080825281016110f98184611648565b6020808252810161093081611680565b60208082528101610930816116b9565b6020808252810161093081611718565b6020808252810161093081611751565b60208082528101610930816117b0565b60208082528101610930816117e9565b6020808252810161093081611848565b6020808252810161093081611881565b6040810161190a8285611636565b5190565b90815260200190565b600061093082611a6e565b90565b6001600160a01b031690565b151590565b600061093082611a60565b600061093082611a7f565b600061093082611a6b565b60005b83811015611abb578181015183820152602001611aa3565b838111156113445750506000910152565b601f01601f19169056fea265627a7a7230582067610340d195579cc28e9d11398b1e0461e735c5a7df70268772668d5b21ac596c6578706572696d656e74616cf50037",
  "devdoc": {
    "methods": {
      "constructor": {
        "params": {
          "cla_": "The CLA token contract address.",
          "cls_": "The CLS token contract address.",
          "migrationEndBlock_": "Migration end block of masterChef. (must be same to masterChef's one)",
          "miningTreasury_": "Contract address of CLA treasury.",
          "rewarder_": "Contract address of Airdroper.",
          "startBlock_": "Start block of masterChef. (must be same to masterChef's one)"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "amount": "CLS token amount to deposit.",
          "user": "The receiver of `amount` deposit benefit."
        }
      },
      "harvest(address)": {
        "details": "Harvest proceeds for transaction sender to `to`.",
        "params": {
          "to": "Receiver of CLA rewards."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingCla(address)": {
        "params": {
          "user": "Address of user."
        },
        "return": "Pending CLA reward for a given user."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setClsRewardRatio(uint256,bool)": {
        "params": {
          "clsRewardRatio_": "Cls reward ratio.",
          "withUpdate": "Update pool flag."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "CLS token amount to withdraw.",
          "user": "Receiver of the CLS tokens."
        }
      }
    },
    "title": "CLA MasterChef of CLS. distribute CLA tokens to CLS holders * References: * - https://github.com/sushiswap/sushiswap/blob/canary/contracts/MasterChefV2.sol"
  },
  "userdoc": {
    "methods": {
      "claPerBlock()": {
        "notice": "Number of tokens created per block."
      },
      "claPerBlocks(uint256,uint256)": {
        "notice": "Number of tokens created between the given _from to _to blocks."
      },
      "deposit(address,uint256)": {
        "notice": "Deposit CLS tokens."
      },
      "pendingCla(address)": {
        "notice": "View function to see pending CLA."
      },
      "setClsRewardRatio(uint256,bool)": {
        "notice": "Set cls reward ratio."
      },
      "setMiningTreasury(address)": {
        "notice": "Set MiningTreasury"
      },
      "setRewarder(address)": {
        "notice": "Set Rewarder (airdroper)"
      },
      "updatePool()": {
        "notice": "Update accumulated reward per block of the pool."
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw CLS tokens."
      }
    }
  }
}