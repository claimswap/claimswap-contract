{
  "address": "0x54FB37b0D56D837BC021d89f3cd833dE87BAf09e",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "claDistributor_",
          "type": "address"
        }
      ],
      "name": "setClaDistributor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cla",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "cla_",
          "type": "address"
        }
      ],
      "name": "setCla",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "ratioSetter_",
          "type": "address"
        }
      ],
      "name": "setRatioSetter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ratioSetter",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "masterChef_",
          "type": "address"
        }
      ],
      "name": "setMasterChef",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "clsRewardRatio",
          "type": "uint256"
        },
        {
          "name": "withUpdate",
          "type": "bool"
        }
      ],
      "name": "setClsRewardRatio",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "claDistributor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "clsRewardRatio",
          "type": "uint256"
        }
      ],
      "name": "LogSetClaRewardRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0x79379899c59c0ea8aac5ba5aed4f8dc7744511268bc9d381b722eca6aad66a3c",
  "receipt": {
    "to": null,
    "from": "0xed0E18F99b684009fcF44c80E471717335aC49C9",
    "contractAddress": "0x54FB37b0D56D837BC021d89f3cd833dE87BAf09e",
    "transactionIndex": 2,
    "gasUsed": "935549",
    "logsBloom": "0x
    "blockHash": "0x96145e4d5c542c9c0f641c25d26a6b12b7a68ae524d7a2db6878757f62063f6b",
    "transactionHash": "0x79379899c59c0ea8aac5ba5aed4f8dc7744511268bc9d381b722eca6aad66a3c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 77303496,
        "transactionHash": "0x79379899c59c0ea8aac5ba5aed4f8dc7744511268bc9d381b722eca6aad66a3c",
        "address": "0x54FB37b0D56D837BC021d89f3cd833dE87BAf09e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed0e18f99b684009fcf44c80e471717335ac49c9"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x96145e4d5c542c9c0f641c25d26a6b12b7a68ae524d7a2db6878757f62063f6b"
      }
    ],
    "blockNumber": 77303496,
    "cumulativeGasUsed": "935549",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "361661ccd7e0f10c6c6321a0fe32ce9d",
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"claDistributor_\",\"type\":\"address\"}],\"name\":\"setClaDistributor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cla\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cla_\",\"type\":\"address\"}],\"name\":\"setCla\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ratioSetter_\",\"type\":\"address\"}],\"name\":\"setRatioSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratioSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masterChef_\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clsRewardRatio\",\"type\":\"uint256\"},{\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"setClsRewardRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"clsRewardRatio\",\"type\":\"uint256\"}],\"name\":\"LogSetClaRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CLA/MiningTreasury.sol\":\"MiningTreasury\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"contracts/CLA/MiningTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../codes/Ownable.sol\\\";\\n\\ninterface IClaDistributor {\\n    function setClsRewardRatio(uint256, bool) external;\\n}\\n\\ninterface IMasterChef {\\n    function setLpRewardRatio(uint256, bool) external;\\n}\\n\\ncontract MiningTreasury is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public cla;\\n    /// @notice CLA distributor address for CLS holders.\\n    IClaDistributor public claDistributor;\\n    /// @notice masterChef address for CLA LP farm.\\n    IMasterChef public masterChef;\\n    /// @notice ratio address.\\n    address public ratioSetter;\\n    /// @notice Reward ratio between LP staker and CLA staker\\n    uint256 private constant CLA_REWARD_RATIO_DIVISOR = 1e12;\\n\\n    event LogSetClaRewardRatio(uint256 clsRewardRatio);\\n\\n    function setCla(IERC20 cla_) public {\\n        require(address(cla) == address(0), \\\"cla is already set\\\");\\n        cla = cla_;\\n    }\\n\\n    function transfer(uint256 amount) public {\\n        require(\\n            (address(claDistributor) == msg.sender) ||\\n                (address(masterChef) == msg.sender),\\n            \\\"Ownable: caller is not the masterChef||claDistributor\\\"\\n        );\\n        cla.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function setClsRewardRatio(uint256 clsRewardRatio, bool withUpdate) public {\\n        require(\\n            (owner() == msg.sender) || (ratioSetter == msg.sender),\\n            \\\"Ownable: caller is not the owner||ratioSetter\\\"\\n        );\\n        require(\\n            clsRewardRatio <= CLA_REWARD_RATIO_DIVISOR,\\n            \\\"claRewardRatio should be lower than CLA_REWARD_RATIO_DIVISOR\\\"\\n        );\\n\\n        uint256 lpRewardRatio = CLA_REWARD_RATIO_DIVISOR - clsRewardRatio;\\n\\n        masterChef.setLpRewardRatio(lpRewardRatio, withUpdate);\\n        if (address(claDistributor) != address(0)) {\\n            claDistributor.setClsRewardRatio(clsRewardRatio, withUpdate);\\n        }\\n\\n        emit LogSetClaRewardRatio(clsRewardRatio);\\n    }\\n\\n    // Update multiplier address by the previous dev.\\n    function setRatioSetter(address ratioSetter_) public {\\n        require(\\n            (owner() == msg.sender) || (ratioSetter == msg.sender),\\n            \\\"ratioSetter: wut?\\\"\\n        );\\n        ratioSetter = ratioSetter_;\\n    }\\n\\n    function setClaDistributor(IClaDistributor claDistributor_)\\n        public\\n        onlyOwner\\n    {\\n        claDistributor = claDistributor_;\\n    }\\n\\n    function setMasterChef(IMasterChef masterChef_) public onlyOwner {\\n        masterChef = masterChef_;\\n    }\\n}\\n\",\"keccak256\":\"0xa614fbd6dffe1cec0f6ea3774e3ee80f7a54f09bce417183550985f5b0d4d875\"},\"contracts/codes/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.5.6;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n * \\n * Reference:\\n * \\n * - https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.1/contracts/access/Ownable.sol\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb066925af388797de1160b7ac2b460194b3575b7eec15ecd2643b398423f5b90\"}},\"version\":1}",
  "bytecode": "0x60806040819052600080546001600160a01b031916339081178255918291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610c9c806100536000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80637634262b1161008c578063a2d9f4dc11610066578063a2d9f4dc146101b9578063b7236694146101df578063cf2b8f3814610204578063f2fde38b1461020c576100df565b80637634262b146101835780638da5cb5b146101a95780639db6480a146101b1576100df565b80635884cd80116100bd5780635884cd801461014d57806361cc77d214610155578063715018a61461017b576100df565b806311b169bf146100e457806312514bba1461010c578063575a86b214610129575b600080fd5b61010a600480360360208110156100fa57600080fd5b50356001600160a01b0316610232565b005b61010a6004803603602081101561012257600080fd5b50356102bb565b61013161033c565b604080516001600160a01b039092168252519081900360200190f35b61013161034b565b61010a6004803603602081101561016b57600080fd5b50356001600160a01b031661035a565b61010a6103dd565b61010a6004803603602081101561019957600080fd5b50356001600160a01b031661048e565b61013161052c565b61013161053b565b61010a600480360360208110156101cf57600080fd5b50356001600160a01b031661054a565b61010a600480360360408110156101f557600080fd5b508035906020013515156105d3565b6101316107e1565b61010a6004803603602081101561022257600080fd5b50356001600160a01b03166107f0565b3361023b61052c565b6001600160a01b0316146102995760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314806102de57506003546001600160a01b031633145b61031c57604051600160e51b62461bcd028152600401808060200182810382526035815260200180610c126035913960400191505060405180910390fd5b600154610339906001600160a01b0316338363ffffffff6108fa16565b50565b6003546001600160a01b031681565b6001546001600160a01b031681565b6001546001600160a01b0316156103bb5760408051600160e51b62461bcd02815260206004820152601260248201527f636c6120697320616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336103e661052c565b6001600160a01b0316146104445760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b3361049761052c565b6001600160a01b031614806104b657506004546001600160a01b031633145b61050a5760408051600160e51b62461bcd02815260206004820152601160248201527f726174696f5365747465723a207775743f000000000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6004546001600160a01b031681565b3361055361052c565b6001600160a01b0316146105b15760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336105dc61052c565b6001600160a01b031614806105fb57506004546001600160a01b031633145b61063957604051600160e51b62461bcd02815260040180806020018281038252602d815260200180610ba9602d913960400191505060405180910390fd5b64e8d4a5100082111561068057604051600160e51b62461bcd02815260040180806020018281038252603c815260200180610bd6603c913960400191505060405180910390fd5b600354604080517f570bcb2100000000000000000000000000000000000000000000000000000000815264e8d4a51000859003600482018190528415156024830152915191926001600160a01b03169163570bcb219160448082019260009290919082900301818387803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b50506002546001600160a01b03161591506107a9905057600254604080517fb723669400000000000000000000000000000000000000000000000000000000815260048101869052841515602482015290516001600160a01b039092169163b72366949160448082019260009290919082900301818387803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050505b6040805184815290517fb5547d12315ae3412fce9027dd9a803f00678717fe2de6b5835de10f906495df9181900360200190a1505050565b6002546001600160a01b031681565b336107f961052c565b6001600160a01b0316146108575760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661089f57604051600160e51b62461bcd028152600401808060200182810382526026815260200180610b836026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261097a90849061097f565b505050565b610991826001600160a01b0316610b46565b6109e55760408051600160e51b62461bcd02815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610a235780518252601f199092019160209182019101610a04565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b509150915081610ae45760408051600160e51b62461bcd02815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610b4057808060200190516020811015610b0057600080fd5b5051610b4057604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610c47602a913960400191505060405180910390fd5b50505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610b7a57508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727c7c726174696f536574746572636c61526577617264526174696f2073686f756c64206265206c6f776572207468616e20434c415f5245574152445f524154494f5f44495649534f524f776e61626c653a2063616c6c6572206973206e6f7420746865206d6173746572436865667c7c636c614469737472696275746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a72305820a64778dff573310574cb5a4c487701cba99cfbd3b2faf9c33b7eff219ead70be0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637634262b1161008c578063a2d9f4dc11610066578063a2d9f4dc146101b9578063b7236694146101df578063cf2b8f3814610204578063f2fde38b1461020c576100df565b80637634262b146101835780638da5cb5b146101a95780639db6480a146101b1576100df565b80635884cd80116100bd5780635884cd801461014d57806361cc77d214610155578063715018a61461017b576100df565b806311b169bf146100e457806312514bba1461010c578063575a86b214610129575b600080fd5b61010a600480360360208110156100fa57600080fd5b50356001600160a01b0316610232565b005b61010a6004803603602081101561012257600080fd5b50356102bb565b61013161033c565b604080516001600160a01b039092168252519081900360200190f35b61013161034b565b61010a6004803603602081101561016b57600080fd5b50356001600160a01b031661035a565b61010a6103dd565b61010a6004803603602081101561019957600080fd5b50356001600160a01b031661048e565b61013161052c565b61013161053b565b61010a600480360360208110156101cf57600080fd5b50356001600160a01b031661054a565b61010a600480360360408110156101f557600080fd5b508035906020013515156105d3565b6101316107e1565b61010a6004803603602081101561022257600080fd5b50356001600160a01b03166107f0565b3361023b61052c565b6001600160a01b0316146102995760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314806102de57506003546001600160a01b031633145b61031c57604051600160e51b62461bcd028152600401808060200182810382526035815260200180610c126035913960400191505060405180910390fd5b600154610339906001600160a01b0316338363ffffffff6108fa16565b50565b6003546001600160a01b031681565b6001546001600160a01b031681565b6001546001600160a01b0316156103bb5760408051600160e51b62461bcd02815260206004820152601260248201527f636c6120697320616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336103e661052c565b6001600160a01b0316146104445760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b3361049761052c565b6001600160a01b031614806104b657506004546001600160a01b031633145b61050a5760408051600160e51b62461bcd02815260206004820152601160248201527f726174696f5365747465723a207775743f000000000000000000000000000000604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6004546001600160a01b031681565b3361055361052c565b6001600160a01b0316146105b15760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336105dc61052c565b6001600160a01b031614806105fb57506004546001600160a01b031633145b61063957604051600160e51b62461bcd02815260040180806020018281038252602d815260200180610ba9602d913960400191505060405180910390fd5b64e8d4a5100082111561068057604051600160e51b62461bcd02815260040180806020018281038252603c815260200180610bd6603c913960400191505060405180910390fd5b600354604080517f570bcb2100000000000000000000000000000000000000000000000000000000815264e8d4a51000859003600482018190528415156024830152915191926001600160a01b03169163570bcb219160448082019260009290919082900301818387803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b50506002546001600160a01b03161591506107a9905057600254604080517fb723669400000000000000000000000000000000000000000000000000000000815260048101869052841515602482015290516001600160a01b039092169163b72366949160448082019260009290919082900301818387803b15801561079057600080fd5b505af11580156107a4573d6000803e3d6000fd5b505050505b6040805184815290517fb5547d12315ae3412fce9027dd9a803f00678717fe2de6b5835de10f906495df9181900360200190a1505050565b6002546001600160a01b031681565b336107f961052c565b6001600160a01b0316146108575760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661089f57604051600160e51b62461bcd028152600401808060200182810382526026815260200180610b836026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261097a90849061097f565b505050565b610991826001600160a01b0316610b46565b6109e55760408051600160e51b62461bcd02815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b60208310610a235780518252601f199092019160209182019101610a04565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b509150915081610ae45760408051600160e51b62461bcd02815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b805115610b4057808060200190516020811015610b0057600080fd5b5051610b4057604051600160e51b62461bcd02815260040180806020018281038252602a815260200180610c47602a913960400191505060405180910390fd5b50505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610b7a57508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727c7c726174696f536574746572636c61526577617264526174696f2073686f756c64206265206c6f776572207468616e20434c415f5245574152445f524154494f5f44495649534f524f776e61626c653a2063616c6c6572206973206e6f7420746865206d6173746572436865667c7c636c614469737472696275746f725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a165627a7a72305820a64778dff573310574cb5a4c487701cba99cfbd3b2faf9c33b7eff219ead70be0029",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}